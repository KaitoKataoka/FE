{"ast":null,"code":"var _jsxFileName = \"/Users/kaito/hackathon/FE/app/src/Post/ReplyList.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useCallback } from 'react';\nimport ReplyLikeButton from './Reply_like.tsx';\nimport { fireAuth } from '../firebase.ts';\nimport { fetchLikedReply } from './Reply_like.tsx';\nimport ReplyForm from './ReplyForm.tsx';\nimport { Box, Text, Button, Divider, Center, Loader, Avatar } from '@mantine/core';\nimport defaultAvatar from '../assets/default_user.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ReplyList = ({\n  tweetId\n}) => {\n  _s();\n  const [replies, setReplies] = useState([]);\n  const [likedTweets, setLikedTweets] = useState([]);\n  const [replyLoading, setReplyLoading] = useState(true);\n  const [showReplyForm, setShowReplyForm] = useState(false);\n  const fetchReplies = useCallback(async () => {\n    try {\n      setReplyLoading(true);\n      let likedTweetsData = [];\n      if (fireAuth.currentUser) {\n        likedTweetsData = (await fetchLikedReply(fireAuth.currentUser.uid)) || [];\n        setLikedTweets(likedTweetsData);\n      }\n      const response = await fetch(`https://hackathon-ro2txyk6rq-uc.a.run.app/searchreply?tweetid=${tweetId}`);\n      const data = await response.json();\n      console.log(tweetId);\n      console.log(data);\n      if (data) {\n        const replys = data.map(reply => ({\n          replyid: reply.replyid,\n          tweetid: reply.tweetid,\n          replycontent: reply.replycontent,\n          username: reply.username,\n          time: reply.time,\n          like: reply.like,\n          isLiked: likedTweetsData.includes(reply.replyid)\n        }));\n        setReplies(replys);\n        console.log(\"Replies fetched successfully:\", replys); // Debug log\n      }\n    } catch (error) {\n      console.error('Error fetching replies:', error);\n    } finally {\n      setReplyLoading(false);\n    }\n  }, [tweetId]);\n  useEffect(() => {\n    fetchReplies();\n  }, [fetchReplies, tweetId]);\n  const handleLikeChange = (replyid, isLiked, likeCount) => {\n    setLikedTweets(prev => isLiked ? [...prev, replyid] : prev.filter(id => id !== replyid));\n    setReplies(prevReplies => prevReplies.map(reply => reply.replyid === replyid ? {\n      ...reply,\n      like: likeCount,\n      isLiked\n    } : reply));\n  };\n  const formatDateTime = dateTime => {\n    const date = new Date(dateTime);\n    const formattedDate = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}`;\n    const formattedTime = `${String(date.getHours()).padStart(2, '0')}:${String(date.getMinutes()).padStart(2, '0')}:${String(date.getSeconds()).padStart(2, '0')}`;\n    return `${formattedDate} ${formattedTime}`;\n  };\n  const handleReplyPosted = () => {\n    fetchReplies(); // 返信が投稿された後に返信リストを再取得\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: [replyLoading ? /*#__PURE__*/_jsxDEV(Center, {\n      children: /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }, this) : replies.map(reply => /*#__PURE__*/_jsxDEV(Box, {\n      mt: \"md\",\n      children: [/*#__PURE__*/_jsxDEV(Avatar, {\n        src: defaultAvatar,\n        alt: \"Profile\",\n        size: 50,\n        radius: \"xl\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        weight: 500,\n        children: reply.username\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        children: reply.replycontent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        size: \"xs\",\n        color: \"gray\",\n        children: formatDateTime(reply.time)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(ReplyLikeButton, {\n        replyid: reply.replyid,\n        initialLike: reply.like,\n        initialIsLiked: reply.isLiked,\n        onLikeChange: handleLikeChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {\n        my: \"sm\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 13\n      }, this)]\n    }, reply.replyid, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 11\n    }, this)), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: () => setShowReplyForm(!showReplyForm),\n      children: \"\\u8FD4\\u4FE1\\u3092\\u30DD\\u30B9\\u30C8\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), showReplyForm && /*#__PURE__*/_jsxDEV(ReplyForm, {\n      tweetId: tweetId,\n      onReplyPosted: handleReplyPosted\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n};\n_s(ReplyList, \"MeYt9ZZPW7huL41tUnaM9gg+e3s=\");\n_c = ReplyList;\nexport default ReplyList;\nvar _c;\n$RefreshReg$(_c, \"ReplyList\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","ReplyLikeButton","fireAuth","fetchLikedReply","ReplyForm","Box","Text","Button","Divider","Center","Loader","Avatar","defaultAvatar","jsxDEV","_jsxDEV","ReplyList","tweetId","_s","replies","setReplies","likedTweets","setLikedTweets","replyLoading","setReplyLoading","showReplyForm","setShowReplyForm","fetchReplies","likedTweetsData","currentUser","uid","response","fetch","data","json","console","log","replys","map","reply","replyid","tweetid","replycontent","username","time","like","isLiked","includes","error","handleLikeChange","likeCount","prev","filter","id","prevReplies","formatDateTime","dateTime","date","Date","formattedDate","getFullYear","String","getMonth","padStart","getDate","formattedTime","getHours","getMinutes","getSeconds","handleReplyPosted","children","fileName","_jsxFileName","lineNumber","columnNumber","mt","src","alt","size","radius","weight","color","initialLike","initialIsLiked","onLikeChange","my","onClick","onReplyPosted","_c","$RefreshReg$"],"sources":["/Users/kaito/hackathon/FE/app/src/Post/ReplyList.tsx"],"sourcesContent":["import React, { useEffect, useState, useCallback } from 'react';\nimport ReplyLikeButton from './Reply_like.tsx';\nimport { fireAuth } from '../firebase.ts';\nimport { fetchLikedReply } from './Reply_like.tsx';\nimport ReplyForm from './ReplyForm.tsx';\nimport { Box, Text, Button, Divider, Grid, Center, Loader, Avatar } from '@mantine/core';\nimport defaultAvatar from '../assets/default_user.png';\n\ninterface Reply {\n  replyid: string;\n  tweetid: string;\n  replycontent: string;\n  username: string;\n  time: string;\n  like: number;\n  isLiked: boolean;\n}\n\ninterface ReplyListProps {\n  tweetId: string;\n}\n\nconst ReplyList: React.FC<ReplyListProps> = ({ tweetId }) => {\n  const [replies, setReplies] = useState<Reply[]>([]);\n  const [likedTweets, setLikedTweets] = useState<string[]>([]);\n  const [replyLoading, setReplyLoading] = useState<boolean>(true);\n  const [showReplyForm, setShowReplyForm] = useState<boolean>(false);\n\n  const fetchReplies = useCallback(async () => {\n    try {\n      setReplyLoading(true);\n      let likedTweetsData: string[] = [];\n      if (fireAuth.currentUser) {\n        likedTweetsData = await fetchLikedReply(fireAuth.currentUser.uid) || [];\n        setLikedTweets(likedTweetsData);\n      }\n      const response = await fetch(`https://hackathon-ro2txyk6rq-uc.a.run.app/searchreply?tweetid=${tweetId}`);\n      const data = await response.json();\n      console.log(tweetId);\n      console.log(data);\n      if (data) {\n        const replys = data.map((reply: any) => ({\n          replyid: reply.replyid,\n          tweetid: reply.tweetid,\n          replycontent: reply.replycontent,\n          username: reply.username,\n          time: reply.time,\n          like: reply.like,\n          isLiked: likedTweetsData.includes(reply.replyid),\n        }));\n        setReplies(replys);\n        console.log(\"Replies fetched successfully:\", replys); // Debug log\n      }\n    } catch (error) {\n      console.error('Error fetching replies:', error);\n    } finally {\n      setReplyLoading(false);\n    }\n  }, [tweetId]);\n\n  useEffect(() => {\n    fetchReplies();\n  }, [fetchReplies, tweetId]);\n\n  const handleLikeChange = (replyid: string, isLiked: boolean, likeCount: number) => {\n    setLikedTweets(prev => isLiked ? [...prev, replyid] : prev.filter(id => id !== replyid));\n    setReplies(prevReplies =>\n      prevReplies.map(reply =>\n        reply.replyid === replyid ? { ...reply, like: likeCount, isLiked } : reply\n      )\n    );\n  };\n\n  const formatDateTime = (dateTime: string) => {\n    const date = new Date(dateTime);\n    const formattedDate = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}`;\n    const formattedTime = `${String(date.getHours()).padStart(2, '0')}:${String(date.getMinutes()).padStart(2, '0')}:${String(date.getSeconds()).padStart(2, '0')}`;\n    return `${formattedDate} ${formattedTime}`;\n  };\n\n  const handleReplyPosted = () => {\n    fetchReplies(); // 返信が投稿された後に返信リストを再取得\n  };\n\n  return (\n    <Box>\n      {replyLoading ? (\n        <Center>\n          <Loader />\n        </Center>\n      ) : (\n        replies.map((reply) => (\n          <Box key={reply.replyid} mt=\"md\">\n            <Avatar src={defaultAvatar} alt=\"Profile\" size={50} radius=\"xl\">\n                </Avatar>\n            <Text weight={500}>{reply.username}</Text>\n            <Text>{reply.replycontent}</Text>\n            <Text size=\"xs\" color=\"gray\">{formatDateTime(reply.time)}</Text>\n            <ReplyLikeButton\n              replyid={reply.replyid}\n              initialLike={reply.like}\n              initialIsLiked={reply.isLiked}\n              onLikeChange={handleLikeChange}\n            />\n            <Divider my=\"sm\" />\n          </Box>\n        ))\n      )}\n      <Button onClick={() => setShowReplyForm(!showReplyForm)}>返信をポスト</Button>\n      {showReplyForm && (\n        <ReplyForm\n          tweetId={tweetId}\n          onReplyPosted={handleReplyPosted}\n        />\n      )}\n    </Box>\n  );\n};\n\nexport default ReplyList;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AAC/D,OAAOC,eAAe,MAAM,kBAAkB;AAC9C,SAASC,QAAQ,QAAQ,gBAAgB;AACzC,SAASC,eAAe,QAAQ,kBAAkB;AAClD,OAAOC,SAAS,MAAM,iBAAiB;AACvC,SAASC,GAAG,EAAEC,IAAI,EAAEC,MAAM,EAAEC,OAAO,EAAQC,MAAM,EAAEC,MAAM,EAAEC,MAAM,QAAQ,eAAe;AACxF,OAAOC,aAAa,MAAM,4BAA4B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAgBvD,MAAMC,SAAmC,GAAGA,CAAC;EAAEC;AAAQ,CAAC,KAAK;EAAAC,EAAA;EAC3D,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGpB,QAAQ,CAAU,EAAE,CAAC;EACnD,MAAM,CAACqB,WAAW,EAAEC,cAAc,CAAC,GAAGtB,QAAQ,CAAW,EAAE,CAAC;EAC5D,MAAM,CAACuB,YAAY,EAAEC,eAAe,CAAC,GAAGxB,QAAQ,CAAU,IAAI,CAAC;EAC/D,MAAM,CAACyB,aAAa,EAAEC,gBAAgB,CAAC,GAAG1B,QAAQ,CAAU,KAAK,CAAC;EAElE,MAAM2B,YAAY,GAAG1B,WAAW,CAAC,YAAY;IAC3C,IAAI;MACFuB,eAAe,CAAC,IAAI,CAAC;MACrB,IAAII,eAAyB,GAAG,EAAE;MAClC,IAAIzB,QAAQ,CAAC0B,WAAW,EAAE;QACxBD,eAAe,GAAG,OAAMxB,eAAe,CAACD,QAAQ,CAAC0B,WAAW,CAACC,GAAG,CAAC,KAAI,EAAE;QACvER,cAAc,CAACM,eAAe,CAAC;MACjC;MACA,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAAC,iEAAiEf,OAAO,EAAE,CAAC;MACxG,MAAMgB,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAClCC,OAAO,CAACC,GAAG,CAACnB,OAAO,CAAC;MACpBkB,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC;MACjB,IAAIA,IAAI,EAAE;QACR,MAAMI,MAAM,GAAGJ,IAAI,CAACK,GAAG,CAAEC,KAAU,KAAM;UACvCC,OAAO,EAAED,KAAK,CAACC,OAAO;UACtBC,OAAO,EAAEF,KAAK,CAACE,OAAO;UACtBC,YAAY,EAAEH,KAAK,CAACG,YAAY;UAChCC,QAAQ,EAAEJ,KAAK,CAACI,QAAQ;UACxBC,IAAI,EAAEL,KAAK,CAACK,IAAI;UAChBC,IAAI,EAAEN,KAAK,CAACM,IAAI;UAChBC,OAAO,EAAElB,eAAe,CAACmB,QAAQ,CAACR,KAAK,CAACC,OAAO;QACjD,CAAC,CAAC,CAAC;QACHpB,UAAU,CAACiB,MAAM,CAAC;QAClBF,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEC,MAAM,CAAC,CAAC,CAAC;MACxD;IACF,CAAC,CAAC,OAAOW,KAAK,EAAE;MACdb,OAAO,CAACa,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IACjD,CAAC,SAAS;MACRxB,eAAe,CAAC,KAAK,CAAC;IACxB;EACF,CAAC,EAAE,CAACP,OAAO,CAAC,CAAC;EAEblB,SAAS,CAAC,MAAM;IACd4B,YAAY,CAAC,CAAC;EAChB,CAAC,EAAE,CAACA,YAAY,EAAEV,OAAO,CAAC,CAAC;EAE3B,MAAMgC,gBAAgB,GAAGA,CAACT,OAAe,EAAEM,OAAgB,EAAEI,SAAiB,KAAK;IACjF5B,cAAc,CAAC6B,IAAI,IAAIL,OAAO,GAAG,CAAC,GAAGK,IAAI,EAAEX,OAAO,CAAC,GAAGW,IAAI,CAACC,MAAM,CAACC,EAAE,IAAIA,EAAE,KAAKb,OAAO,CAAC,CAAC;IACxFpB,UAAU,CAACkC,WAAW,IACpBA,WAAW,CAAChB,GAAG,CAACC,KAAK,IACnBA,KAAK,CAACC,OAAO,KAAKA,OAAO,GAAG;MAAE,GAAGD,KAAK;MAAEM,IAAI,EAAEK,SAAS;MAAEJ;IAAQ,CAAC,GAAGP,KACvE,CACF,CAAC;EACH,CAAC;EAED,MAAMgB,cAAc,GAAIC,QAAgB,IAAK;IAC3C,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAACF,QAAQ,CAAC;IAC/B,MAAMG,aAAa,GAAG,GAAGF,IAAI,CAACG,WAAW,CAAC,CAAC,IAAIC,MAAM,CAACJ,IAAI,CAACK,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,IAAIF,MAAM,CAACJ,IAAI,CAACO,OAAO,CAAC,CAAC,CAAC,CAACD,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE;IACxI,MAAME,aAAa,GAAG,GAAGJ,MAAM,CAACJ,IAAI,CAACS,QAAQ,CAAC,CAAC,CAAC,CAACH,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,IAAIF,MAAM,CAACJ,IAAI,CAACU,UAAU,CAAC,CAAC,CAAC,CAACJ,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,IAAIF,MAAM,CAACJ,IAAI,CAACW,UAAU,CAAC,CAAC,CAAC,CAACL,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE;IAC/J,OAAO,GAAGJ,aAAa,IAAIM,aAAa,EAAE;EAC5C,CAAC;EAED,MAAMI,iBAAiB,GAAGA,CAAA,KAAM;IAC9B1C,YAAY,CAAC,CAAC,CAAC,CAAC;EAClB,CAAC;EAED,oBACEZ,OAAA,CAACT,GAAG;IAAAgE,QAAA,GACD/C,YAAY,gBACXR,OAAA,CAACL,MAAM;MAAA4D,QAAA,eACLvD,OAAA,CAACJ,MAAM;QAAA4D,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACJ,CAAC,GAETvD,OAAO,CAACmB,GAAG,CAAEC,KAAK,iBAChBxB,OAAA,CAACT,GAAG;MAAqBqE,EAAE,EAAC,IAAI;MAAAL,QAAA,gBAC9BvD,OAAA,CAACH,MAAM;QAACgE,GAAG,EAAE/D,aAAc;QAACgE,GAAG,EAAC,SAAS;QAACC,IAAI,EAAE,EAAG;QAACC,MAAM,EAAC;MAAI;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnD,CAAC,eACb3D,OAAA,CAACR,IAAI;QAACyE,MAAM,EAAE,GAAI;QAAAV,QAAA,EAAE/B,KAAK,CAACI;MAAQ;QAAA4B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eAC1C3D,OAAA,CAACR,IAAI;QAAA+D,QAAA,EAAE/B,KAAK,CAACG;MAAY;QAAA6B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eACjC3D,OAAA,CAACR,IAAI;QAACuE,IAAI,EAAC,IAAI;QAACG,KAAK,EAAC,MAAM;QAAAX,QAAA,EAAEf,cAAc,CAAChB,KAAK,CAACK,IAAI;MAAC;QAAA2B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eAChE3D,OAAA,CAACb,eAAe;QACdsC,OAAO,EAAED,KAAK,CAACC,OAAQ;QACvB0C,WAAW,EAAE3C,KAAK,CAACM,IAAK;QACxBsC,cAAc,EAAE5C,KAAK,CAACO,OAAQ;QAC9BsC,YAAY,EAAEnC;MAAiB;QAAAsB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAChC,CAAC,eACF3D,OAAA,CAACN,OAAO;QAAC4E,EAAE,EAAC;MAAI;QAAAd,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA,GAZXnC,KAAK,CAACC,OAAO;MAAA+B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAalB,CACN,CACF,eACD3D,OAAA,CAACP,MAAM;MAAC8E,OAAO,EAAEA,CAAA,KAAM5D,gBAAgB,CAAC,CAACD,aAAa,CAAE;MAAA6C,QAAA,EAAC;IAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EACvEjD,aAAa,iBACZV,OAAA,CAACV,SAAS;MACRY,OAAO,EAAEA,OAAQ;MACjBsE,aAAa,EAAElB;IAAkB;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClC,CACF;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACxD,EAAA,CA/FIF,SAAmC;AAAAwE,EAAA,GAAnCxE,SAAmC;AAiGzC,eAAeA,SAAS;AAAC,IAAAwE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}