{"ast":null,"code":"var _jsxFileName = \"/Users/kaito/hackathon/FE/app/src/Post/ReplyForm.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { fireAuth } from '../firebase.ts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ReplyForm = ({\n  tweetId,\n  onReplyPosted\n}) => {\n  _s();\n  const [replyContent, setReplyContent] = useState('');\n  const handleReplySubmit = async () => {\n    const user = fireAuth.currentUser;\n    if (!user) {\n      console.error('User not authenticated');\n      return;\n    }\n    const reply = {\n      replycontent: replyContent,\n      uid: user.uid,\n      tweetid: tweetId,\n      username: user.displayName // 現在ログインしているユーザーのユーザー名を設定\n    };\n    try {\n      const response = await fetch('https://hackathon-ro2txyk6rq-uc.a.run.app/reply', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(reply)\n      });\n      if (response.ok) {\n        const data = await response.json();\n        console.log(\"Reply response data:\", data); // デバッグ用のコンソールログ\n        onReplyPosted();\n        setReplyContent('');\n      } else {\n        console.error('Failed to post reply');\n      }\n    } catch (error) {\n      console.error('Error posting reply:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: replyContent,\n      onChange: e => setReplyContent(e.target.value),\n      placeholder: \"\\u8FD4\\u4FE1\\u3092\\u5165\\u529B\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleReplySubmit,\n      children: \"\\u8FD4\\u4FE1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n_s(ReplyForm, \"bQJiZoDc8KjhzaYN0/Eo0htCkl8=\");\n_c = ReplyForm;\nexport default ReplyForm;\nvar _c;\n$RefreshReg$(_c, \"ReplyForm\");","map":{"version":3,"names":["React","useState","fireAuth","jsxDEV","_jsxDEV","ReplyForm","tweetId","onReplyPosted","_s","replyContent","setReplyContent","handleReplySubmit","user","currentUser","console","error","reply","replycontent","uid","tweetid","username","displayName","response","fetch","method","headers","body","JSON","stringify","ok","data","json","log","children","type","value","onChange","e","target","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/kaito/hackathon/FE/app/src/Post/ReplyForm.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { fireAuth } from '../firebase.ts';\n\ninterface ReplyFormProps {\n  tweetId: string;\n  onReplyPosted: () => void;\n}\n\nconst ReplyForm: React.FC<ReplyFormProps> = ({ tweetId, onReplyPosted }) => {\n  const [replyContent, setReplyContent] = useState('');\n\n  const handleReplySubmit = async () => {\n    const user = fireAuth.currentUser;\n    if (!user) {\n      console.error('User not authenticated');\n      return;\n    }\n\n    const reply = {\n      replycontent: replyContent,\n      uid: user.uid,\n      tweetid: tweetId,\n      username: user.displayName, // 現在ログインしているユーザーのユーザー名を設定\n    };\n\n    try {\n      const response = await fetch('https://hackathon-ro2txyk6rq-uc.a.run.app/reply', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(reply),\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        console.log(\"Reply response data:\", data); // デバッグ用のコンソールログ\n        onReplyPosted();\n        setReplyContent('');\n      } else {\n        console.error('Failed to post reply');\n      }\n    } catch (error) {\n      console.error('Error posting reply:', error);\n    }\n  };\n\n  return (\n    <div>\n      <input\n        type=\"text\"\n        value={replyContent}\n        onChange={(e) => setReplyContent(e.target.value)}\n        placeholder=\"返信を入力\"\n      />\n      <button onClick={handleReplySubmit}>返信</button>\n    </div>\n  );\n};\n\nexport default ReplyForm;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,QAAQ,QAAQ,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAO1C,MAAMC,SAAmC,GAAGA,CAAC;EAAEC,OAAO;EAAEC;AAAc,CAAC,KAAK;EAAAC,EAAA;EAC1E,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAEpD,MAAMU,iBAAiB,GAAG,MAAAA,CAAA,KAAY;IACpC,MAAMC,IAAI,GAAGV,QAAQ,CAACW,WAAW;IACjC,IAAI,CAACD,IAAI,EAAE;MACTE,OAAO,CAACC,KAAK,CAAC,wBAAwB,CAAC;MACvC;IACF;IAEA,MAAMC,KAAK,GAAG;MACZC,YAAY,EAAER,YAAY;MAC1BS,GAAG,EAAEN,IAAI,CAACM,GAAG;MACbC,OAAO,EAAEb,OAAO;MAChBc,QAAQ,EAAER,IAAI,CAACS,WAAW,CAAE;IAC9B,CAAC;IAED,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,iDAAiD,EAAE;QAC9EC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACZ,KAAK;MAC5B,CAAC,CAAC;MAEF,IAAIM,QAAQ,CAACO,EAAE,EAAE;QACf,MAAMC,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;QAClCjB,OAAO,CAACkB,GAAG,CAAC,sBAAsB,EAAEF,IAAI,CAAC,CAAC,CAAC;QAC3CvB,aAAa,CAAC,CAAC;QACfG,eAAe,CAAC,EAAE,CAAC;MACrB,CAAC,MAAM;QACLI,OAAO,CAACC,KAAK,CAAC,sBAAsB,CAAC;MACvC;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC9C;EACF,CAAC;EAED,oBACEX,OAAA;IAAA6B,QAAA,gBACE7B,OAAA;MACE8B,IAAI,EAAC,MAAM;MACXC,KAAK,EAAE1B,YAAa;MACpB2B,QAAQ,EAAGC,CAAC,IAAK3B,eAAe,CAAC2B,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;MACjDI,WAAW,EAAC;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpB,CAAC,eACFvC,OAAA;MAAQwC,OAAO,EAAEjC,iBAAkB;MAAAsB,QAAA,EAAC;IAAE;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC5C,CAAC;AAEV,CAAC;AAACnC,EAAA,CAlDIH,SAAmC;AAAAwC,EAAA,GAAnCxC,SAAmC;AAoDzC,eAAeA,SAAS;AAAC,IAAAwC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}