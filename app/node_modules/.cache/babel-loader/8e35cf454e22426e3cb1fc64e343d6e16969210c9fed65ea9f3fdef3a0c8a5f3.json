{"ast":null,"code":"var _jsxFileName = \"/Users/kaito/hackathon/FE/app/src/Post/ReplyList.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useCallback } from 'react';\nimport ReplyLikeButton from './Reply_like.tsx';\nimport { fireAuth } from '../firebase.ts';\nimport { fetchLikedReply } from './Reply_like.tsx';\nimport ReplyForm from './ReplyForm';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ReplyList = ({\n  tweetId\n}) => {\n  _s();\n  var _fireAuth$currentUser;\n  const [replies, setReplies] = useState([]);\n  const [likedTweets, setLikedTweets] = useState([]);\n  const [replyLoading, setReplyLoading] = useState(true);\n  const fetchReplies = useCallback(async () => {\n    try {\n      setReplyLoading(true);\n      if (fireAuth.currentUser) {\n        const likedTweetsData = await fetchLikedReply(fireAuth.currentUser.uid);\n        setLikedTweets(likedTweetsData);\n        const response = await fetch(`https://hackathon-ro2txyk6rq-uc.a.run.app/searchreply?tweetid=${tweetId}`);\n        const data = await response.json();\n        if (data) {\n          const replys = data.map(reply => ({\n            replyid: reply.replyid,\n            tweetid: reply.tweetid,\n            replycontent: reply.replycontent,\n            username: reply.username,\n            time: reply.time,\n            like: reply.like,\n            isLiked: likedTweetsData.includes(reply.replyid)\n          }));\n          setReplies(replys);\n          console.log(\"Replies fetched successfully:\", replys); // Debug log\n        }\n      }\n    } catch (error) {\n      console.error('Error fetching replies:', error);\n    } finally {\n      setReplyLoading(false);\n    }\n  }, [tweetId]);\n  useEffect(() => {\n    fetchReplies();\n  }, [fetchReplies, tweetId]);\n  const handleLikeChange = (replyid, isLiked, likeCount) => {\n    setLikedTweets(prev => isLiked ? [...prev, replyid] : prev.filter(id => id !== replyid));\n    setReplies(prevReplies => prevReplies.map(reply => reply.replyid === replyid ? {\n      ...reply,\n      like: likeCount,\n      isLiked\n    } : reply));\n  };\n  const formatDateTime = dateTime => {\n    const date = new Date(dateTime);\n    const formattedDate = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}`;\n    const formattedTime = `${String(date.getHours()).padStart(2, '0')}:${String(date.getMinutes()).padStart(2, '0')}:${String(date.getSeconds()).padStart(2, '0')}`;\n    return `${formattedDate} ${formattedTime}`;\n  };\n  const handleReplyPosted = () => {\n    fetchReplies(); // 返信が投稿された後に返信リストを再取得\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: replyLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        textAlign: 'center'\n      },\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [replies.map(reply => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: reply.username\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: reply.replycontent\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: formatDateTime(reply.time)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(ReplyLikeButton, {\n          replyid: reply.replyid,\n          initialLike: reply.like,\n          initialIsLiked: reply.isLiked,\n          onLikeChange: handleLikeChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 15\n        }, this)]\n      }, reply.replyid, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 13\n      }, this)), /*#__PURE__*/_jsxDEV(ReplyForm, {\n        tweetId: tweetId,\n        userName: ((_fireAuth$currentUser = fireAuth.currentUser) === null || _fireAuth$currentUser === void 0 ? void 0 : _fireAuth$currentUser.displayName) || '',\n        onReplyPosted: handleReplyPosted\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n};\n_s(ReplyList, \"zz7dgssw0sJtflJUNRdUimURhp8=\");\n_c = ReplyList;\nexport default ReplyList;\nvar _c;\n$RefreshReg$(_c, \"ReplyList\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","ReplyLikeButton","fireAuth","fetchLikedReply","ReplyForm","jsxDEV","_jsxDEV","Fragment","_Fragment","ReplyList","tweetId","_s","_fireAuth$currentUser","replies","setReplies","likedTweets","setLikedTweets","replyLoading","setReplyLoading","fetchReplies","currentUser","likedTweetsData","uid","response","fetch","data","json","replys","map","reply","replyid","tweetid","replycontent","username","time","like","isLiked","includes","console","log","error","handleLikeChange","likeCount","prev","filter","id","prevReplies","formatDateTime","dateTime","date","Date","formattedDate","getFullYear","String","getMonth","padStart","getDate","formattedTime","getHours","getMinutes","getSeconds","handleReplyPosted","children","style","textAlign","fileName","_jsxFileName","lineNumber","columnNumber","initialLike","initialIsLiked","onLikeChange","userName","displayName","onReplyPosted","_c","$RefreshReg$"],"sources":["/Users/kaito/hackathon/FE/app/src/Post/ReplyList.tsx"],"sourcesContent":["import React, { useEffect, useState, useCallback } from 'react';\nimport ReplyLikeButton from './Reply_like.tsx';\nimport { fireAuth } from '../firebase.ts';\nimport { fetchLikedReply } from './Reply_like.tsx';\nimport ReplyForm from './ReplyForm';\n\ninterface Reply {\n  replyid: string;\n  tweetid: string;\n  replycontent: string;\n  username: string;\n  time: string;\n  like: number;\n  isLiked: boolean;\n}\n\ninterface ReplyListProps {\n  tweetId: string;\n}\n\nconst ReplyList: React.FC<ReplyListProps> = ({ tweetId }) => {\n  const [replies, setReplies] = useState<Reply[]>([]);\n  const [likedTweets, setLikedTweets] = useState<string[]>([]);\n  const [replyLoading, setReplyLoading] = useState<boolean>(true);\n\n  const fetchReplies = useCallback(async () => {\n    try {\n      setReplyLoading(true);\n      if (fireAuth.currentUser) {\n        const likedTweetsData = await fetchLikedReply(fireAuth.currentUser.uid);\n        setLikedTweets(likedTweetsData);\n        const response = await fetch(`https://hackathon-ro2txyk6rq-uc.a.run.app/searchreply?tweetid=${tweetId}`);\n        const data = await response.json();\n        if (data) {\n          const replys = data.map((reply: any) => ({\n            replyid: reply.replyid,\n            tweetid: reply.tweetid,\n            replycontent: reply.replycontent,\n            username: reply.username,\n            time: reply.time,\n            like: reply.like,\n            isLiked: likedTweetsData.includes(reply.replyid),\n          }));\n          setReplies(replys);\n          console.log(\"Replies fetched successfully:\", replys); // Debug log\n        }\n      }\n    } catch (error) {\n      console.error('Error fetching replies:', error);\n    } finally {\n      setReplyLoading(false);\n    }\n  }, [tweetId]);\n\n  useEffect(() => {\n    fetchReplies();\n  }, [fetchReplies, tweetId]);\n\n  const handleLikeChange = (replyid: string, isLiked: boolean, likeCount: number) => {\n    setLikedTweets(prev => isLiked ? [...prev, replyid] : prev.filter(id => id !== replyid));\n    setReplies(prevReplies =>\n      prevReplies.map(reply =>\n        reply.replyid === replyid ? { ...reply, like: likeCount, isLiked } : reply\n      )\n    );\n  };\n\n  const formatDateTime = (dateTime: string) => {\n    const date = new Date(dateTime);\n    const formattedDate = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}`;\n    const formattedTime = `${String(date.getHours()).padStart(2, '0')}:${String(date.getMinutes()).padStart(2, '0')}:${String(date.getSeconds()).padStart(2, '0')}`;\n    return `${formattedDate} ${formattedTime}`;\n  };\n\n  const handleReplyPosted = () => {\n    fetchReplies(); // 返信が投稿された後に返信リストを再取得\n  };\n\n  return (\n    <div>\n      {replyLoading ? (\n        <div style={{ textAlign: 'center' }}>Loading...</div>\n      ) : (\n        <>\n          {replies.map((reply) => (\n            <div key={reply.replyid}>\n              <p>{reply.username}</p>\n              <p>{reply.replycontent}</p>\n              <p>{formatDateTime(reply.time)}</p>\n              <ReplyLikeButton\n                replyid={reply.replyid}\n                initialLike={reply.like}\n                initialIsLiked={reply.isLiked}\n                onLikeChange={handleLikeChange}\n              />\n            </div>\n          ))}\n          <ReplyForm tweetId={tweetId} userName={fireAuth.currentUser?.displayName || ''} onReplyPosted={handleReplyPosted} />\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default ReplyList;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}