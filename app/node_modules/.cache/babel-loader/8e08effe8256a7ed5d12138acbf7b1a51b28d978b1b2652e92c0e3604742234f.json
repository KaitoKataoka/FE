{"ast":null,"code":"var _jsxFileName = \"/Users/kaito/hackathon/FE/app/src/Post/CircleForm.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Box, Button, Input, Text } from '@mantine/core';\nimport { fireAuth } from '../firebase.ts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CircleCreateForm = ({\n  onCircleCreated\n}) => {\n  _s();\n  const [circleName, setCircleName] = useState('');\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!circleName) {\n      setError('サークル名を入力してください');\n      return;\n    }\n    try {\n      var _fireAuth$currentUser;\n      const response = await fetch('https://hackathon-ro2txyk6rq-uc.a.run.app/postcircle', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          circleName,\n          creater: (_fireAuth$currentUser = fireAuth.currentUser) === null || _fireAuth$currentUser === void 0 ? void 0 : _fireAuth$currentUser.uid\n        })\n      });\n      if (response.ok) {\n        setSuccess('サークルが作成されました');\n        setCircleName('');\n        setError('');\n        onCircleCreated(); // サークルが作成された後に親コンポーネントに通知\n      } else {\n        const result = await response.json();\n        setError(result.message || 'サークルの作成に失敗しました');\n        setSuccess('');\n      }\n    } catch (err) {\n      setError('サークルの作成に失敗しました');\n      setSuccess('');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(Input, {\n        placeholder: \"\\u30B5\\u30FC\\u30AF\\u30EB\\u540D\",\n        value: circleName,\n        onChange: e => setCircleName(e.target.value),\n        mb: \"md\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(Text, {\n        color: \"red\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 19\n      }, this), success && /*#__PURE__*/_jsxDEV(Text, {\n        color: \"green\",\n        children: success\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"submit\",\n        children: \"\\u30B5\\u30FC\\u30AF\\u30EB\\u4F5C\\u6210\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n_s(CircleCreateForm, \"VNMVs9x2npBt/ZzsvhaL7tMC9es=\");\n_c = CircleCreateForm;\nexport default CircleCreateForm;\nvar _c;\n$RefreshReg$(_c, \"CircleCreateForm\");","map":{"version":3,"names":["React","useState","Box","Button","Input","Text","fireAuth","jsxDEV","_jsxDEV","CircleCreateForm","onCircleCreated","_s","circleName","setCircleName","error","setError","success","setSuccess","handleSubmit","e","preventDefault","_fireAuth$currentUser","response","fetch","method","headers","body","JSON","stringify","creater","currentUser","uid","ok","result","json","message","err","children","onSubmit","placeholder","value","onChange","target","mb","fileName","_jsxFileName","lineNumber","columnNumber","color","type","_c","$RefreshReg$"],"sources":["/Users/kaito/hackathon/FE/app/src/Post/CircleForm.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { Box, Button, Input, Text, Center } from '@mantine/core';\nimport { fireAuth } from '../firebase.ts';\n\ninterface Circle {\n  circleid: string;\n  circlename: string;\n  creater: string;\n}\n\ninterface CircleCreateFormProps {\n  onCircleCreated: () => void;\n}\n\nconst CircleCreateForm: React.FC<CircleCreateFormProps> = ({ onCircleCreated }) => {\n  const [circleName, setCircleName] = useState('');\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!circleName) {\n      setError('サークル名を入力してください');\n      return;\n    }\n\n    try {\n      const response = await fetch('https://hackathon-ro2txyk6rq-uc.a.run.app/postcircle', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ circleName, creater: fireAuth.currentUser?.uid }),\n      });\n\n      if (response.ok) {\n        setSuccess('サークルが作成されました');\n        setCircleName('');\n        setError('');\n        onCircleCreated(); // サークルが作成された後に親コンポーネントに通知\n      } else {\n        const result = await response.json();\n        setError(result.message || 'サークルの作成に失敗しました');\n        setSuccess('');\n      }\n    } catch (err) {\n      setError('サークルの作成に失敗しました');\n      setSuccess('');\n    }\n  };\n\n  return (\n    <Box>\n      <form onSubmit={handleSubmit}>\n        <Input\n          placeholder=\"サークル名\"\n          value={circleName}\n          onChange={(e) => setCircleName(e.target.value)}\n          mb=\"md\"\n        />\n        {error && <Text color=\"red\">{error}</Text>}\n        {success && <Text color=\"green\">{success}</Text>}\n        <Button type=\"submit\">サークル作成</Button>\n      </form>\n    </Box>\n  );\n};\n\nexport default CircleCreateForm;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}