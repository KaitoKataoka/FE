{"ast":null,"code":"var _jsxFileName = \"/Users/kaito/hackathon/FE/app/src/Post/CirclePage.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Box, Text, Center, Loader } from '@mantine/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CirclePage = () => {\n  _s();\n  const {\n    circleid\n  } = useParams();\n  const [circle, setCircle] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  useEffect(() => {\n    const fetchCircle = async () => {\n      try {\n        const response = await fetch(`https://hackathon-ro2txyk6rq-uc.a.run.app/getcirclebyid?circleid=${circleid}`);\n        if (response.ok) {\n          const data = await response.json();\n          setCircle(data);\n        } else {\n          setError('サークルの取得に失敗しました');\n        }\n      } catch (err) {\n        setError('サークルの取得に失敗しました');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchCircle();\n  }, [circleid]);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Center, {\n      style: {\n        height: '100vh'\n      },\n      children: /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(Center, {\n      style: {\n        height: '100vh'\n      },\n      children: /*#__PURE__*/_jsxDEV(Text, {\n        color: \"red\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: /*#__PURE__*/_jsxDEV(Text, {\n      children: circle === null || circle === void 0 ? void 0 : circle.circlename\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n_s(CirclePage, \"q67CEddybZShSMB1ZfPGSUNk+TM=\", false, function () {\n  return [useParams];\n});\n_c = CirclePage;\nexport default CirclePage;\nvar _c;\n$RefreshReg$(_c, \"CirclePage\");","map":{"version":3,"names":["React","useEffect","useState","useParams","Box","Text","Center","Loader","jsxDEV","_jsxDEV","CirclePage","_s","circleid","circle","setCircle","loading","setLoading","error","setError","fetchCircle","response","fetch","ok","data","json","err","style","height","children","fileName","_jsxFileName","lineNumber","columnNumber","color","circlename","_c","$RefreshReg$"],"sources":["/Users/kaito/hackathon/FE/app/src/Post/CirclePage.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Box, Text, Center, Loader } from '@mantine/core';\n\nconst CirclePage = () => {\n  const { circleid } = useParams();\n  const [circle, setCircle] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    const fetchCircle = async () => {\n      try {\n        const response = await fetch(`https://hackathon-ro2txyk6rq-uc.a.run.app/getcirclebyid?circleid=${circleid}`);\n        if (response.ok) {\n          const data = await response.json();\n          setCircle(data);\n        } else {\n          setError('サークルの取得に失敗しました');\n        }\n      } catch (err) {\n        setError('サークルの取得に失敗しました');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchCircle();\n  }, [circleid]);\n\n  if (loading) {\n    return (\n      <Center style={{ height: '100vh' }}>\n        <Loader />\n      </Center>\n    );\n  }\n\n  if (error) {\n    return (\n      <Center style={{ height: '100vh' }}>\n        <Text color=\"red\">{error}</Text>\n      </Center>\n    );\n  }\n\n  return (\n    <Box>\n      <Text>{circle?.circlename}</Text>\n      {/* サークルに関する他の情報を表示 */}\n    </Box>\n  );\n};\n\nexport default CirclePage;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,SAASC,GAAG,EAAEC,IAAI,EAAEC,MAAM,EAAEC,MAAM,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1D,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAM;IAAEC;EAAS,CAAC,GAAGT,SAAS,CAAC,CAAC;EAChC,MAAM,CAACU,MAAM,EAAEC,SAAS,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAC1C,MAAM,CAACa,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACe,KAAK,EAAEC,QAAQ,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EAEtCD,SAAS,CAAC,MAAM;IACd,MAAMkB,WAAW,GAAG,MAAAA,CAAA,KAAY;MAC9B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,oEAAoET,QAAQ,EAAE,CAAC;QAC5G,IAAIQ,QAAQ,CAACE,EAAE,EAAE;UACf,MAAMC,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;UAClCV,SAAS,CAACS,IAAI,CAAC;QACjB,CAAC,MAAM;UACLL,QAAQ,CAAC,gBAAgB,CAAC;QAC5B;MACF,CAAC,CAAC,OAAOO,GAAG,EAAE;QACZP,QAAQ,CAAC,gBAAgB,CAAC;MAC5B,CAAC,SAAS;QACRF,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDG,WAAW,CAAC,CAAC;EACf,CAAC,EAAE,CAACP,QAAQ,CAAC,CAAC;EAEd,IAAIG,OAAO,EAAE;IACX,oBACEN,OAAA,CAACH,MAAM;MAACoB,KAAK,EAAE;QAAEC,MAAM,EAAE;MAAQ,CAAE;MAAAC,QAAA,eACjCnB,OAAA,CAACF,MAAM;QAAAsB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACJ,CAAC;EAEb;EAEA,IAAIf,KAAK,EAAE;IACT,oBACER,OAAA,CAACH,MAAM;MAACoB,KAAK,EAAE;QAAEC,MAAM,EAAE;MAAQ,CAAE;MAAAC,QAAA,eACjCnB,OAAA,CAACJ,IAAI;QAAC4B,KAAK,EAAC,KAAK;QAAAL,QAAA,EAAEX;MAAK;QAAAY,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1B,CAAC;EAEb;EAEA,oBACEvB,OAAA,CAACL,GAAG;IAAAwB,QAAA,eACFnB,OAAA,CAACJ,IAAI;MAAAuB,QAAA,EAAEf,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEqB;IAAU;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAE9B,CAAC;AAEV,CAAC;AAACrB,EAAA,CAhDID,UAAU;EAAA,QACOP,SAAS;AAAA;AAAAgC,EAAA,GAD1BzB,UAAU;AAkDhB,eAAeA,UAAU;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}