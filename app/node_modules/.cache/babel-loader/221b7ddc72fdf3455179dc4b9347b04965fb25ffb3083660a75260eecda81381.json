{"ast":null,"code":"var _jsxFileName = \"/Users/kaito/hackathon/FE/app/src/Post/Hashtag.tsx\";\nimport React from 'react';\nimport { Text } from '@mantine/core';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst HashtagText = ({\n  text\n}) => {\n  const renderTextWithHashtags = text => {\n    const parts = text.split(/(#[^\\s]+)/g); // ハッシュタグで分割\n    return parts.map((part, index) => part.startsWith('#') ? /*#__PURE__*/_jsxDEV(Text, {\n      component: \"span\",\n      color: \"blue\",\n      weight: 600,\n      children: part\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Text, {\n      size: \"xl\",\n      component: \"span\",\n      weight: 500,\n      children: part\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 9\n    }, this));\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: renderTextWithHashtags(text)\n  }, void 0, false);\n};\n_c = HashtagText;\nexport default HashtagText;\nvar _c;\n$RefreshReg$(_c, \"HashtagText\");","map":{"version":3,"names":["React","Text","jsxDEV","_jsxDEV","Fragment","_Fragment","HashtagText","text","renderTextWithHashtags","parts","split","map","part","index","startsWith","component","color","weight","children","fileName","_jsxFileName","lineNumber","columnNumber","size","_c","$RefreshReg$"],"sources":["/Users/kaito/hackathon/FE/app/src/Post/Hashtag.tsx"],"sourcesContent":["import React from 'react';\nimport { Text } from '@mantine/core';\n\ninterface HashtagTextProps {\n  text: string;\n}\n\nconst HashtagText: React.FC<HashtagTextProps> = ({ text }) => {\n  const renderTextWithHashtags = (text: string) => {\n    const parts = text.split(/(#[^\\s]+)/g); // ハッシュタグで分割\n    return parts.map((part, index) =>\n      part.startsWith('#') ? (\n        <Text component=\"span\" color=\"blue\" key={index} weight={600}>{part}</Text>\n      ) : (\n        <Text  size=\"xl\" component=\"span\" key={index} weight={500}>{part}</Text>\n      )\n    );\n  };\n\n  return <>{renderTextWithHashtags(text)}</>;\n};\n\nexport default HashtagText;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,IAAI,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAMrC,MAAMC,WAAuC,GAAGA,CAAC;EAAEC;AAAK,CAAC,KAAK;EAC5D,MAAMC,sBAAsB,GAAID,IAAY,IAAK;IAC/C,MAAME,KAAK,GAAGF,IAAI,CAACG,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC;IACxC,OAAOD,KAAK,CAACE,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,KAC3BD,IAAI,CAACE,UAAU,CAAC,GAAG,CAAC,gBAClBX,OAAA,CAACF,IAAI;MAACc,SAAS,EAAC,MAAM;MAACC,KAAK,EAAC,MAAM;MAAaC,MAAM,EAAE,GAAI;MAAAC,QAAA,EAAEN;IAAI,GAAzBC,KAAK;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAA2B,CAAC,gBAE1EnB,OAAA,CAACF,IAAI;MAAEsB,IAAI,EAAC,IAAI;MAACR,SAAS,EAAC,MAAM;MAAaE,MAAM,EAAE,GAAI;MAAAC,QAAA,EAAEN;IAAI,GAAzBC,KAAK;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAA2B,CAE3E,CAAC;EACH,CAAC;EAED,oBAAOnB,OAAA,CAAAE,SAAA;IAAAa,QAAA,EAAGV,sBAAsB,CAACD,IAAI;EAAC,gBAAG,CAAC;AAC5C,CAAC;AAACiB,EAAA,GAbIlB,WAAuC;AAe7C,eAAeA,WAAW;AAAC,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}