{"ast":null,"code":"var _jsxFileName = \"/Users/kaito/hackathon/FE/app/src/Post/CircleForm.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Box, Button, Input, Text, Center } from '@mantine/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CircleCreateForm = () => {\n  _s();\n  const [circleName, setCircleName] = useState('');\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!circleName) {\n      setError('サークル名を入力してください');\n      return;\n    }\n    try {\n      const response = await fetch('https://hackathon-ro2txyk6rq-uc.a.run.app/postcircle', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          circleName,\n          creater: 'currentUserId'\n        }) // currentUserIdは適切なユーザーIDに置き換えてください\n      });\n      if (response.ok) {\n        const result = await response.json();\n        setSuccess('サークルが作成されました');\n        setCircleName('');\n        setError('');\n      } else {\n        const result = await response.json();\n        setError(result.message || 'サークルの作成に失敗しました');\n        setSuccess('');\n      }\n    } catch (err) {\n      setError('サークルの作成に失敗しました');\n      setSuccess('');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Center, {\n    style: {\n      height: '100vh'\n    },\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(Input, {\n          placeholder: \"\\u30B5\\u30FC\\u30AF\\u30EB\\u540D\",\n          value: circleName,\n          onChange: e => setCircleName(e.target.value),\n          mb: \"md\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this), error && /*#__PURE__*/_jsxDEV(Text, {\n          color: \"red\",\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 21\n        }, this), success && /*#__PURE__*/_jsxDEV(Text, {\n          color: \"green\",\n          children: success\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 23\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          children: \"\\u30B5\\u30FC\\u30AF\\u30EB\\u4F5C\\u6210\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n_s(CircleCreateForm, \"VNMVs9x2npBt/ZzsvhaL7tMC9es=\");\n_c = CircleCreateForm;\nexport default CircleCreateForm;\nvar _c;\n$RefreshReg$(_c, \"CircleCreateForm\");","map":{"version":3,"names":["React","useState","Box","Button","Input","Text","Center","jsxDEV","_jsxDEV","CircleCreateForm","_s","circleName","setCircleName","error","setError","success","setSuccess","handleSubmit","e","preventDefault","response","fetch","method","headers","body","JSON","stringify","creater","ok","result","json","message","err","style","height","children","onSubmit","placeholder","value","onChange","target","mb","fileName","_jsxFileName","lineNumber","columnNumber","color","type","_c","$RefreshReg$"],"sources":["/Users/kaito/hackathon/FE/app/src/Post/CircleForm.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { Box, Button, Input, Text, Center } from '@mantine/core';\n\nconst CircleCreateForm = () => {\n  const [circleName, setCircleName] = useState('');\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (!circleName) {\n      setError('サークル名を入力してください');\n      return;\n    }\n\n    try {\n      const response = await fetch('https://hackathon-ro2txyk6rq-uc.a.run.app/postcircle', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ circleName, creater: 'currentUserId' }), // currentUserIdは適切なユーザーIDに置き換えてください\n      });\n\n      if (response.ok) {\n        const result = await response.json();\n        setSuccess('サークルが作成されました');\n        setCircleName('');\n        setError('');\n      } else {\n        const result = await response.json();\n        setError(result.message || 'サークルの作成に失敗しました');\n        setSuccess('');\n      }\n    } catch (err) {\n      setError('サークルの作成に失敗しました');\n      setSuccess('');\n    }\n  };\n\n  return (\n    <Center style={{ height: '100vh' }}>\n      <Box>\n        <form onSubmit={handleSubmit}>\n          <Input\n            placeholder=\"サークル名\"\n            value={circleName}\n            onChange={(e) => setCircleName(e.target.value)}\n            mb=\"md\"\n          />\n          {error && <Text color=\"red\">{error}</Text>}\n          {success && <Text color=\"green\">{success}</Text>}\n          <Button type=\"submit\">サークル作成</Button>\n        </form>\n      </Box>\n    </Center>\n  );\n};\n\nexport default CircleCreateForm;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,GAAG,EAAEC,MAAM,EAAEC,KAAK,EAAEC,IAAI,EAAEC,MAAM,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjE,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC7B,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACY,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACc,OAAO,EAAEC,UAAU,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAE1C,MAAMgB,YAAY,GAAG,MAAOC,CAAC,IAAK;IAChCA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClB,IAAI,CAACR,UAAU,EAAE;MACfG,QAAQ,CAAC,gBAAgB,CAAC;MAC1B;IACF;IAEA,IAAI;MACF,MAAMM,QAAQ,GAAG,MAAMC,KAAK,CAAC,sDAAsD,EAAE;QACnFC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEf,UAAU;UAAEgB,OAAO,EAAE;QAAgB,CAAC,CAAC,CAAE;MAClE,CAAC,CAAC;MAEF,IAAIP,QAAQ,CAACQ,EAAE,EAAE;QACf,MAAMC,MAAM,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;QACpCd,UAAU,CAAC,cAAc,CAAC;QAC1BJ,aAAa,CAAC,EAAE,CAAC;QACjBE,QAAQ,CAAC,EAAE,CAAC;MACd,CAAC,MAAM;QACL,MAAMe,MAAM,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;QACpChB,QAAQ,CAACe,MAAM,CAACE,OAAO,IAAI,gBAAgB,CAAC;QAC5Cf,UAAU,CAAC,EAAE,CAAC;MAChB;IACF,CAAC,CAAC,OAAOgB,GAAG,EAAE;MACZlB,QAAQ,CAAC,gBAAgB,CAAC;MAC1BE,UAAU,CAAC,EAAE,CAAC;IAChB;EACF,CAAC;EAED,oBACER,OAAA,CAACF,MAAM;IAAC2B,KAAK,EAAE;MAAEC,MAAM,EAAE;IAAQ,CAAE;IAAAC,QAAA,eACjC3B,OAAA,CAACN,GAAG;MAAAiC,QAAA,eACF3B,OAAA;QAAM4B,QAAQ,EAAEnB,YAAa;QAAAkB,QAAA,gBAC3B3B,OAAA,CAACJ,KAAK;UACJiC,WAAW,EAAC,gCAAO;UACnBC,KAAK,EAAE3B,UAAW;UAClB4B,QAAQ,EAAGrB,CAAC,IAAKN,aAAa,CAACM,CAAC,CAACsB,MAAM,CAACF,KAAK,CAAE;UAC/CG,EAAE,EAAC;QAAI;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACR,CAAC,EACDhC,KAAK,iBAAIL,OAAA,CAACH,IAAI;UAACyC,KAAK,EAAC,KAAK;UAAAX,QAAA,EAAEtB;QAAK;UAAA6B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,EACzC9B,OAAO,iBAAIP,OAAA,CAACH,IAAI;UAACyC,KAAK,EAAC,OAAO;UAAAX,QAAA,EAAEpB;QAAO;UAAA2B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eAChDrC,OAAA,CAACL,MAAM;UAAC4C,IAAI,EAAC,QAAQ;UAAAZ,QAAA,EAAC;QAAM;UAAAO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACjC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACJ;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEb,CAAC;AAACnC,EAAA,CAtDID,gBAAgB;AAAAuC,EAAA,GAAhBvC,gBAAgB;AAwDtB,eAAeA,gBAAgB;AAAC,IAAAuC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}