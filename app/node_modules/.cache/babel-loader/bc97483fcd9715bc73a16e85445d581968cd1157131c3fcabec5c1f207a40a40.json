{"ast":null,"code":"import axios from 'axios';\nimport { fireAuth } from '../firebase.ts';\nconst api = axios.create({\n  baseURL: 'https://hackathon-ro2txyk6rq-uc.a.run.app'\n});\napi.interceptors.request.use(async config => {\n  const user = fireAuth.currentUser;\n  if (user) {\n    const token = await user.getIdToken();\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\nexport const getPosts = async () => {\n  const response = await api.get('/posts');\n  return response.data;\n};\nexport const createPost = async content => {\n  return new Promise(async (resolve, reject) => {\n    var _fireAuth$currentUser;\n    const firebaseUID = (_fireAuth$currentUser = fireAuth.currentUser) === null || _fireAuth$currentUser === void 0 ? void 0 : _fireAuth$currentUser.uid;\n    var errormessage = \"\";\n    if (!content) {\n      alert(\"tweet is empty\");\n      errormessage = \"tweet is empty\";\n    }\n    if (errormessage) {\n      console.log(errormessage);\n      reject(errormessage);\n      return;\n    }\n    try {\n      const response = await fetch(\"https://hackathon-ro2txyk6rq-uc.a.run.app/post\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          uid: firebaseUID,\n          content: content\n        })\n      });\n      if (!response.ok) {\n        alert(\"failed to tweet\");\n        errormessage = \"failed to tweet\";\n        reject(errormessage);\n        return;\n      } else {\n        console.log(firebaseUID);\n        resolve();\n      }\n    } catch (error) {\n      console.error(\"failed tweet\", error);\n      alert(\"failed tweet\");\n      reject(error);\n    }\n  });\n};\nexport const likePost = async postId => {\n  await api.post(`/posts/${postId}/like`);\n};","map":{"version":3,"names":["axios","fireAuth","api","create","baseURL","interceptors","request","use","config","user","currentUser","token","getIdToken","headers","Authorization","getPosts","response","get","data","createPost","content","Promise","resolve","reject","_fireAuth$currentUser","firebaseUID","uid","errormessage","alert","console","log","fetch","method","body","JSON","stringify","ok","error","likePost","postId","post"],"sources":["/Users/kaito/hackathon/FE/app/src/Post/Postapi.tsx"],"sourcesContent":["import axios from 'axios';\nimport {fireAuth} from '../firebase.ts';\nimport { Post } from '../App.tsx'\n\nconst api = axios.create({\n  baseURL: 'https://hackathon-ro2txyk6rq-uc.a.run.app',\n});\n\napi.interceptors.request.use(async config => {\n  const user = fireAuth.currentUser;\n  if (user) {\n    const token = await user.getIdToken();\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\nexport const getPosts = async (): Promise<Post[]> => {\n  const response = await api.get('/posts');\n  return response.data;\n};\n\nexport const createPost = async (content: string) => {\n  return new Promise<void>(async (resolve, reject) => {\n    const firebaseUID = fireAuth.currentUser?.uid\n    var errormessage = \"\"\n    if (!content) {\n      alert (\"tweet is empty\");\n      errormessage = \"tweet is empty\"\n    }\n    if (errormessage) {\n      console.log(errormessage);\n      reject(errormessage);\n      return;\n    }\n    try{\n      const response = await fetch(\n      \"https://hackathon-ro2txyk6rq-uc.a.run.app/post\",{\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          uid: firebaseUID,\n          content:content,\n        }),\n      });\n    if (!response.ok) {\n      alert(\"failed to tweet\")\n      errormessage = \"failed to tweet\"\n      reject(errormessage)\n      return;\n    }else{\n      console.log(firebaseUID);\n      resolve();\n    }\n    }catch(error){\n      console.error(\"failed tweet\",error)\n      alert(\"failed tweet\")\n      reject(error)\n    }\n  });\n};\n\nexport const likePost = async (postId: string) => {\n  await api.post(`/posts/${postId}/like`);\n};\n\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAAQC,QAAQ,QAAO,gBAAgB;AAGvC,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACvBC,OAAO,EAAE;AACX,CAAC,CAAC;AAEFF,GAAG,CAACG,YAAY,CAACC,OAAO,CAACC,GAAG,CAAC,MAAMC,MAAM,IAAI;EAC3C,MAAMC,IAAI,GAAGR,QAAQ,CAACS,WAAW;EACjC,IAAID,IAAI,EAAE;IACR,MAAME,KAAK,GAAG,MAAMF,IAAI,CAACG,UAAU,CAAC,CAAC;IACrCJ,MAAM,CAACK,OAAO,CAACC,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOH,MAAM;AACf,CAAC,CAAC;AAEF,OAAO,MAAMO,QAAQ,GAAG,MAAAA,CAAA,KAA6B;EACnD,MAAMC,QAAQ,GAAG,MAAMd,GAAG,CAACe,GAAG,CAAC,QAAQ,CAAC;EACxC,OAAOD,QAAQ,CAACE,IAAI;AACtB,CAAC;AAED,OAAO,MAAMC,UAAU,GAAG,MAAOC,OAAe,IAAK;EACnD,OAAO,IAAIC,OAAO,CAAO,OAAOC,OAAO,EAAEC,MAAM,KAAK;IAAA,IAAAC,qBAAA;IAClD,MAAMC,WAAW,IAAAD,qBAAA,GAAGvB,QAAQ,CAACS,WAAW,cAAAc,qBAAA,uBAApBA,qBAAA,CAAsBE,GAAG;IAC7C,IAAIC,YAAY,GAAG,EAAE;IACrB,IAAI,CAACP,OAAO,EAAE;MACZQ,KAAK,CAAE,gBAAgB,CAAC;MACxBD,YAAY,GAAG,gBAAgB;IACjC;IACA,IAAIA,YAAY,EAAE;MAChBE,OAAO,CAACC,GAAG,CAACH,YAAY,CAAC;MACzBJ,MAAM,CAACI,YAAY,CAAC;MACpB;IACF;IACA,IAAG;MACD,MAAMX,QAAQ,GAAG,MAAMe,KAAK,CAC5B,gDAAgD,EAAC;QAC/CC,MAAM,EAAE,MAAM;QACdnB,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDoB,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBT,GAAG,EAAED,WAAW;UAChBL,OAAO,EAACA;QACV,CAAC;MACH,CAAC,CAAC;MACJ,IAAI,CAACJ,QAAQ,CAACoB,EAAE,EAAE;QAChBR,KAAK,CAAC,iBAAiB,CAAC;QACxBD,YAAY,GAAG,iBAAiB;QAChCJ,MAAM,CAACI,YAAY,CAAC;QACpB;MACF,CAAC,MAAI;QACHE,OAAO,CAACC,GAAG,CAACL,WAAW,CAAC;QACxBH,OAAO,CAAC,CAAC;MACX;IACA,CAAC,QAAMe,KAAK,EAAC;MACXR,OAAO,CAACQ,KAAK,CAAC,cAAc,EAACA,KAAK,CAAC;MACnCT,KAAK,CAAC,cAAc,CAAC;MACrBL,MAAM,CAACc,KAAK,CAAC;IACf;EACF,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAMC,QAAQ,GAAG,MAAOC,MAAc,IAAK;EAChD,MAAMrC,GAAG,CAACsC,IAAI,CAAC,UAAUD,MAAM,OAAO,CAAC;AACzC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}