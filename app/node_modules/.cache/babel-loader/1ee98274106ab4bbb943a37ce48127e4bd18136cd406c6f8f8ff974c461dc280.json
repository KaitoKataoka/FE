{"ast":null,"code":"var _jsxFileName = \"/Users/kaito/hackathon/FE/app/src/Post/Reply.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { fireAuth } from '../firebase.ts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Reply = ({\n  tweetId,\n  profileData,\n  allTweets,\n  setAllTweets\n}) => {\n  _s();\n  const [replyContent, setReplyContent] = useState('');\n  const [showReplyForm, setShowReplyForm] = useState(null);\n  const handleReplySubmit = async tweetId => {\n    var _fireAuth$currentUser;\n    if (replyContent.trim() === \"\") {\n      alert(\"返信内容を入力してください\");\n      return;\n    }\n    const reply = {\n      replycontent: replyContent,\n      uid: (_fireAuth$currentUser = fireAuth.currentUser) === null || _fireAuth$currentUser === void 0 ? void 0 : _fireAuth$currentUser.uid,\n      tweetid: tweetId,\n      username: profileData === null || profileData === void 0 ? void 0 : profileData.username\n    };\n    try {\n      const response = await fetch(\"https://hackathon-ro2txyk6rq-uc.a.run.app/reply\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(reply)\n      });\n      if (response.ok) {\n        setReplyContent('');\n        setShowReplyForm(null);\n        // 返信が成功したら、リストを更新\n        const updatedTweets = allTweets.map(tweet => {\n          if (tweet.tweetid === tweetId) {\n            return {\n              ...tweet,\n              replyCount: (tweet.replyCount || 0) + 1\n            };\n          }\n          return tweet;\n        });\n        setAllTweets(updatedTweets);\n      }\n    } catch (error) {\n      console.error('Failed to post reply:', error);\n    }\n  };\n  const handleReplyButtonClick = tweetId => {\n    setShowReplyForm(tweetId);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => handleReplyButtonClick(tweetId),\n      children: \"\\u8FD4\\u4FE1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), showReplyForm === tweetId && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: replyContent,\n        onChange: e => setReplyContent(e.target.value),\n        placeholder: \"\\u8FD4\\u4FE1\\u5185\\u5BB9\\u3092\\u5165\\u529B\\u3057\\u3066\\u304F\\u3060\\u3055\\u3044\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleReplySubmit(tweetId),\n        children: \"\\u9001\\u4FE1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n_s(Reply, \"vrs5pGm7gAOU7DOH8+L6NX8nfqs=\");\n_c = Reply;\nexport default Reply;\nvar _c;\n$RefreshReg$(_c, \"Reply\");","map":{"version":3,"names":["React","useState","fireAuth","jsxDEV","_jsxDEV","Reply","tweetId","profileData","allTweets","setAllTweets","_s","replyContent","setReplyContent","showReplyForm","setShowReplyForm","handleReplySubmit","_fireAuth$currentUser","trim","alert","reply","replycontent","uid","currentUser","tweetid","username","response","fetch","method","headers","body","JSON","stringify","ok","updatedTweets","map","tweet","replyCount","error","console","handleReplyButtonClick","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","placeholder","_c","$RefreshReg$"],"sources":["/Users/kaito/hackathon/FE/app/src/Post/Reply.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { fireAuth } from '../firebase.ts';\n\ninterface ReplyProps {\n  tweetId: string;\n  profileData: { username: string } | null;\n  allTweets: any[];\n  setAllTweets: React.Dispatch<React.SetStateAction<any[]>>;\n}\n\nconst Reply: React.FC<ReplyProps> = ({ tweetId, profileData, allTweets, setAllTweets }) => {\n  const [replyContent, setReplyContent] = useState('');\n  const [showReplyForm, setShowReplyForm] = useState<string | null>(null);\n\n  const handleReplySubmit = async (tweetId: string) => {\n    if (replyContent.trim() === \"\") {\n      alert(\"返信内容を入力してください\");\n      return;\n    }\n\n    const reply = {\n      replycontent: replyContent,\n      uid: fireAuth.currentUser?.uid,\n      tweetid: tweetId,\n      username: profileData?.username,\n    };\n\n    try {\n      const response = await fetch(\"https://hackathon-ro2txyk6rq-uc.a.run.app/reply\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(reply),\n      });\n\n      if (response.ok) {\n        setReplyContent('');\n        setShowReplyForm(null);\n        // 返信が成功したら、リストを更新\n        const updatedTweets = allTweets.map((tweet) => {\n          if (tweet.tweetid === tweetId) {\n            return { ...tweet, replyCount: (tweet.replyCount || 0) + 1 };\n          }\n          return tweet;\n        });\n        setAllTweets(updatedTweets);\n      }\n    } catch (error) {\n      console.error('Failed to post reply:', error);\n    }\n  };\n\n  const handleReplyButtonClick = (tweetId: string) => {\n    setShowReplyForm(tweetId);\n  };\n\n  return (\n    <div>\n      <button onClick={() => handleReplyButtonClick(tweetId)}>返信</button>\n      {showReplyForm === tweetId && (\n        <div>\n          <textarea\n            value={replyContent}\n            onChange={(e) => setReplyContent(e.target.value)}\n            placeholder=\"返信内容を入力してください\"\n          ></textarea>\n          <button onClick={() => handleReplySubmit(tweetId)}>送信</button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Reply;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}