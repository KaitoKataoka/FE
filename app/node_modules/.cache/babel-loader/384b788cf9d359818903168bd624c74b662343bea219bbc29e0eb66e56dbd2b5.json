{"ast":null,"code":"var _jsxFileName = \"/Users/kaito/hackathon/FE/app/src/Post/Hashtag_ranking.tsx\";\nimport React from 'react';\nimport { Box, Text } from '@mantine/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HashtagRanking = ({\n  tweets,\n  hashtags\n}) => {\n  // ハッシュタグのカウントを行うロジックを追加\n  const hashtagCounts = {};\n  hashtags.forEach(hashtag => {\n    if (hashtagCounts[hashtag]) {\n      hashtagCounts[hashtag]++;\n    } else {\n      hashtagCounts[hashtag] = 1;\n    }\n  });\n\n  // ハッシュタグを頻度でソートしてランキングを作成\n  const sortedHashtags = Object.entries(hashtagCounts).sort((a, b) => b[1] - a[1]);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: [/*#__PURE__*/_jsxDEV(Text, {\n      weight: 700,\n      size: \"lg\",\n      mb: \"md\",\n      children: \"\\u30CF\\u30C3\\u30B7\\u30E5\\u30BF\\u30B0\\u30E9\\u30F3\\u30AD\\u30F3\\u30B0\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), sortedHashtags.map(([hashtag, count], index) => /*#__PURE__*/_jsxDEV(Text, {\n      children: [hashtag, \": \", count]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n_c = HashtagRanking;\nexport default HashtagRanking;\nvar _c;\n$RefreshReg$(_c, \"HashtagRanking\");","map":{"version":3,"names":["React","Box","Text","jsxDEV","_jsxDEV","HashtagRanking","tweets","hashtags","hashtagCounts","forEach","hashtag","sortedHashtags","Object","entries","sort","a","b","children","weight","size","mb","fileName","_jsxFileName","lineNumber","columnNumber","map","count","index","_c","$RefreshReg$"],"sources":["/Users/kaito/hackathon/FE/app/src/Post/Hashtag_ranking.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Box, Text } from '@mantine/core';\n\ninterface Tweet {\n  content: string;\n}\n\ninterface HashtagRankingProps {\n  tweets: Tweet[];\n  hashtags: string[];\n}\n\nconst HashtagRanking: React.FC<HashtagRankingProps> = ({ tweets, hashtags }) => {\n  // ハッシュタグのカウントを行うロジックを追加\n  const hashtagCounts: { [key: string]: number } = {};\n  hashtags.forEach((hashtag) => {\n    if (hashtagCounts[hashtag]) {\n      hashtagCounts[hashtag]++;\n    } else {\n      hashtagCounts[hashtag] = 1;\n    }\n  });\n\n  // ハッシュタグを頻度でソートしてランキングを作成\n  const sortedHashtags = Object.entries(hashtagCounts).sort((a, b) => b[1] - a[1]);\n\n  return (\n    <Box>\n      <Text weight={700} size=\"lg\" mb=\"md\">\n        ハッシュタグランキング\n      </Text>\n      {sortedHashtags.map(([hashtag, count], index) => (\n        <Text key={index}>\n          {hashtag}: {count}\n        </Text>\n      ))}\n    </Box>\n  );\n};\n\nexport default HashtagRanking;\n"],"mappings":";AAAA,OAAOA,KAAK,MAA+B,OAAO;AAClD,SAASC,GAAG,EAAEC,IAAI,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAW1C,MAAMC,cAA6C,GAAGA,CAAC;EAAEC,MAAM;EAAEC;AAAS,CAAC,KAAK;EAC9E;EACA,MAAMC,aAAwC,GAAG,CAAC,CAAC;EACnDD,QAAQ,CAACE,OAAO,CAAEC,OAAO,IAAK;IAC5B,IAAIF,aAAa,CAACE,OAAO,CAAC,EAAE;MAC1BF,aAAa,CAACE,OAAO,CAAC,EAAE;IAC1B,CAAC,MAAM;MACLF,aAAa,CAACE,OAAO,CAAC,GAAG,CAAC;IAC5B;EACF,CAAC,CAAC;;EAEF;EACA,MAAMC,cAAc,GAAGC,MAAM,CAACC,OAAO,CAACL,aAAa,CAAC,CAACM,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAAC,CAAC,CAAC,GAAGD,CAAC,CAAC,CAAC,CAAC,CAAC;EAEhF,oBACEX,OAAA,CAACH,GAAG;IAAAgB,QAAA,gBACFb,OAAA,CAACF,IAAI;MAACgB,MAAM,EAAE,GAAI;MAACC,IAAI,EAAC,IAAI;MAACC,EAAE,EAAC,IAAI;MAAAH,QAAA,EAAC;IAErC;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,EACNb,cAAc,CAACc,GAAG,CAAC,CAAC,CAACf,OAAO,EAAEgB,KAAK,CAAC,EAAEC,KAAK,kBAC1CvB,OAAA,CAACF,IAAI;MAAAe,QAAA,GACFP,OAAO,EAAC,IAAE,EAACgB,KAAK;IAAA,GADRC,KAAK;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEV,CACP,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACI,EAAA,GA1BIvB,cAA6C;AA4BnD,eAAeA,cAAc;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}