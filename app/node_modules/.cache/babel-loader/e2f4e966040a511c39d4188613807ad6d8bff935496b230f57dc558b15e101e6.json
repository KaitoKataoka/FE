{"ast":null,"code":"import axios from 'axios';\nimport { fireAuth } from './firebase';\nconst api = axios.create({\n  baseURL: 'https://hackathon-ro2txyk6rq-uc.a.run.app'\n});\napi.interceptors.request.use(async config => {\n  const user = fireAuth.currentUser;\n  if (user) {\n    const token = await user.getIdToken();\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\nexport const getPosts = async () => {\n  const response = await api.get('/posts');\n  return response.data;\n};\nexport const createPost = async content => {\n  await api.post('/posts', {\n    content\n  });\n};\nexport const likePost = async postId => {\n  await api.post(`/posts/${postId}/like`);\n};\nexport const isProfileComplete = async userId => {\n  const response = await api.get(`/search/${userId}/complete`);\n  return response.data.complete;\n};","map":{"version":3,"names":["axios","fireAuth","api","create","baseURL","interceptors","request","use","config","user","currentUser","token","getIdToken","headers","Authorization","getPosts","response","get","data","createPost","content","post","likePost","postId","isProfileComplete","userId","complete"],"sources":["/Users/kaito/hackathon/FE/app/src/api.tsx"],"sourcesContent":["import axios from 'axios';\nimport {fireAuth} from './firebase';\nimport { Post } from './App'\n\nconst api = axios.create({\n  baseURL: 'https://hackathon-ro2txyk6rq-uc.a.run.app',\n});\n\napi.interceptors.request.use(async config => {\n  const user = fireAuth.currentUser;\n  if (user) {\n    const token = await user.getIdToken();\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\nexport const getPosts = async (): Promise<Post[]> => {\n  const response = await api.get('/posts');\n  return response.data;\n};\n\nexport const createPost = async (content: string) => {\n  await api.post('/posts', { content });\n};\n\nexport const likePost = async (postId: string) => {\n  await api.post(`/posts/${postId}/like`);\n};\n\nexport const isProfileComplete = async (userId: string): Promise<boolean> => {\n  const response = await api.get(`/search/${userId}/complete`);\n  return response.data.complete;\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAAQC,QAAQ,QAAO,YAAY;AAGnC,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACvBC,OAAO,EAAE;AACX,CAAC,CAAC;AAEFF,GAAG,CAACG,YAAY,CAACC,OAAO,CAACC,GAAG,CAAC,MAAMC,MAAM,IAAI;EAC3C,MAAMC,IAAI,GAAGR,QAAQ,CAACS,WAAW;EACjC,IAAID,IAAI,EAAE;IACR,MAAME,KAAK,GAAG,MAAMF,IAAI,CAACG,UAAU,CAAC,CAAC;IACrCJ,MAAM,CAACK,OAAO,CAACC,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOH,MAAM;AACf,CAAC,CAAC;AAEF,OAAO,MAAMO,QAAQ,GAAG,MAAAA,CAAA,KAA6B;EACnD,MAAMC,QAAQ,GAAG,MAAMd,GAAG,CAACe,GAAG,CAAC,QAAQ,CAAC;EACxC,OAAOD,QAAQ,CAACE,IAAI;AACtB,CAAC;AAED,OAAO,MAAMC,UAAU,GAAG,MAAOC,OAAe,IAAK;EACnD,MAAMlB,GAAG,CAACmB,IAAI,CAAC,QAAQ,EAAE;IAAED;EAAQ,CAAC,CAAC;AACvC,CAAC;AAED,OAAO,MAAME,QAAQ,GAAG,MAAOC,MAAc,IAAK;EAChD,MAAMrB,GAAG,CAACmB,IAAI,CAAC,UAAUE,MAAM,OAAO,CAAC;AACzC,CAAC;AAED,OAAO,MAAMC,iBAAiB,GAAG,MAAOC,MAAc,IAAuB;EAC3E,MAAMT,QAAQ,GAAG,MAAMd,GAAG,CAACe,GAAG,CAAC,WAAWQ,MAAM,WAAW,CAAC;EAC5D,OAAOT,QAAQ,CAACE,IAAI,CAACQ,QAAQ;AAC/B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}