{"ast":null,"code":"var _jsxFileName = \"/Users/kaito/hackathon/FE/app/src/Post/ReplyList.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport LikeButton from './Like_post.tsx';\nimport { fetchLikedTweets } from './Like_post.tsx';\nimport { fireAuth } from '../firebase.ts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ReplyList = ({\n  tweetId\n}) => {\n  _s();\n  const [replies, setReplies] = useState([]);\n  const [likedTweets, setLikedTweets] = useState([]);\n  useEffect(() => {\n    const fetchReplies = async () => {\n      try {\n        if (fireAuth.currentUser) {\n          const likedTweetsData = await fetchLikedTweets(fireAuth.currentUser.uid);\n          setLikedTweets(likedTweetsData);\n          const response = await fetch(`https://hackathon-ro2txyk6rq-uc.a.run.app/searchreply?tweetid=${tweetId}`);\n          const data = await response.json();\n          const replys = [];\n          if (data) {\n            const myreplys = data.map(reply => ({\n              replyid: reply.replyid,\n              username: reply.username,\n              time: reply.time,\n              content: reply.replycontent,\n              like: reply.like,\n              isLiked: likedTweetsData.includes(reply.tweetid)\n            }));\n            replys.push(...myreplys);\n          }\n        }\n      } catch (error) {\n        console.error('Error fetching replies:', error);\n      }\n    };\n    fetchReplies();\n  });\n  const handleLikeChange = (replyid, isLiked, likeCount) => {\n    setLikedTweets(prev => isLiked ? [...prev, replyid] : prev.filter(id => id !== replyid));\n    setReplies(prevTweets => prevTweets.map(reply => reply.replyid === replyid ? {\n      ...reply,\n      like: likeCount,\n      isLiked\n    } : reply));\n  };\n  const formatDateTime = dateTime => {\n    const date = new Date(dateTime);\n    const formattedDate = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}`;\n    const formattedTime = `${String(date.getHours()).padStart(2, '0')}:${String(date.getMinutes()).padStart(2, '0')}:${String(date.getSeconds()).padStart(2, '0')}`;\n    return `${formattedDate} ${formattedTime}`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: replies.map(reply => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: reply.username\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: reply.replycontent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: formatDateTime(reply.time)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Likes: \", reply.like]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(LikeButton, {\n        tweetid: reply.replyid,\n        initialLike: reply.like,\n        initialIsLiked: reply.isLiked // ここを適切に変更してください\n        ,\n        onLikeChange: () => {\n          handleLikeChange;\n        } // ここを適切に変更してください\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this)]\n    }, reply.replyid, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n_s(ReplyList, \"+MwNf5IeY0Btt5HMVFQ2THOcV4I=\");\n_c = ReplyList;\nexport default ReplyList;\nvar _c;\n$RefreshReg$(_c, \"ReplyList\");","map":{"version":3,"names":["React","useEffect","useState","LikeButton","fetchLikedTweets","fireAuth","jsxDEV","_jsxDEV","ReplyList","tweetId","_s","replies","setReplies","likedTweets","setLikedTweets","fetchReplies","currentUser","likedTweetsData","uid","response","fetch","data","json","replys","myreplys","map","reply","replyid","username","time","content","replycontent","like","isLiked","includes","tweetid","push","error","console","handleLikeChange","likeCount","prev","filter","id","prevTweets","formatDateTime","dateTime","date","Date","formattedDate","getFullYear","String","getMonth","padStart","getDate","formattedTime","getHours","getMinutes","getSeconds","children","fileName","_jsxFileName","lineNumber","columnNumber","initialLike","initialIsLiked","onLikeChange","_c","$RefreshReg$"],"sources":["/Users/kaito/hackathon/FE/app/src/Post/ReplyList.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport LikeButton from './Like_post.tsx';\nimport { fetchLikedTweets } from './Like_post.tsx';\nimport { fireAuth } from '../firebase.ts';\n\ninterface Reply {\n  replyid: string;\n  tweetid: string;\n  replycontent: string;\n  username: string;\n  time: string;\n  like: number;\n  isLiked: boolean;\n}\n\ninterface ReplyListProps {\n  tweetId: string;\n}\n\nconst ReplyList: React.FC<ReplyListProps> = ({ tweetId }) => {\n  const [replies, setReplies] = useState<Reply[]>([]);\n  const [likedTweets, setLikedTweets] = useState<string[]>([]);\n\n  useEffect(() => {\n    const fetchReplies = async () => {\n      try {\n        if (fireAuth.currentUser) {\n          const likedTweetsData = await fetchLikedTweets(fireAuth.currentUser.uid);\n          setLikedTweets(likedTweetsData);\n        const response = await fetch(`https://hackathon-ro2txyk6rq-uc.a.run.app/searchreply?tweetid=${tweetId}`);\n        const data = await response.json();\n        const replys: Reply[] =[];\n        if(data){\n          const myreplys = data.map((reply: any) => ({\n                replyid: reply.replyid,\n                username: reply.username,\n                time: reply.time,\n                content: reply.replycontent,\n                like: reply.like,\n                isLiked: likedTweetsData.includes(reply.tweetid),\n          }))\n          replys.push(...myreplys)\n        }\n        }\n      } catch (error) {\n        console.error('Error fetching replies:', error);\n      }\n    };\n\n    fetchReplies();\n  },);\n\n  const handleLikeChange = (replyid: string, isLiked: boolean, likeCount: number) => {\n    setLikedTweets(prev => isLiked ? [...prev, replyid] : prev.filter(id => id !== replyid));\n    setReplies(prevTweets =>\n      prevTweets.map(reply =>\n        reply.replyid === replyid ? { ...reply, like: likeCount, isLiked } : reply\n      )\n    );\n  };\n\n  const formatDateTime = (dateTime: string) => {\n    const date = new Date(dateTime);\n    const formattedDate = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}`;\n    const formattedTime = `${String(date.getHours()).padStart(2, '0')}:${String(date.getMinutes()).padStart(2, '0')}:${String(date.getSeconds()).padStart(2, '0')}`;\n    return `${formattedDate} ${formattedTime}`;\n  };\n\n  return (\n    <div>\n      {replies.map((reply) => (\n        <div key={reply.replyid}>\n          <p>{reply.username}</p>\n          <p>{reply.replycontent}</p>\n          <p>{formatDateTime(reply.time)}</p>\n          <p>Likes: {reply.like}</p>\n          <LikeButton\n            tweetid={reply.replyid}\n            initialLike={reply.like}\n            initialIsLiked={reply.isLiked} // ここを適切に変更してください\n            onLikeChange={() => {handleLikeChange}} // ここを適切に変更してください\n          />\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default ReplyList;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}