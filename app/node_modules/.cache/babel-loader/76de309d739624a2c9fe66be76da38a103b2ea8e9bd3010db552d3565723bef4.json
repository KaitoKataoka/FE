{"ast":null,"code":"var _jsxFileName = \"/Users/kaito/hackathon/FE/app/src/Post/Hashtag_ranking.tsx\";\nimport React from 'react';\nimport { Box, Text, Card, Badge, Divider } from '@mantine/core';\nimport { IconHash } from '@tabler/icons-react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HashtagRanking = ({\n  tweets,\n  hashtags\n}) => {\n  // ハッシュタグのカウントを行うロジックを追加\n  const hashtagCounts = {};\n  hashtags.forEach(hashtag => {\n    if (hashtagCounts[hashtag]) {\n      hashtagCounts[hashtag]++;\n    } else {\n      hashtagCounts[hashtag] = 1;\n    }\n  });\n\n  // ハッシュタグを頻度でソートしてランキングを作成\n  const sortedHashtags = Object.entries(hashtagCounts).sort((a, b) => b[1] - a[1]);\n  return /*#__PURE__*/_jsxDEV(Card, {\n    shadow: \"sm\",\n    p: \"lg\",\n    style: {\n      width: '100%'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Text, {\n      weight: 700,\n      size: \"lg\",\n      mb: \"md\",\n      align: \"center\",\n      children: \"\\u30C8\\u30EC\\u30F3\\u30C9\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), sortedHashtags.map(([hashtag, count], index) => /*#__PURE__*/_jsxDEV(Box, {\n      mb: \"sm\",\n      children: [/*#__PURE__*/_jsxDEV(Divider, {\n        my: \"sm\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        display: \"flex\",\n        children: [/*#__PURE__*/_jsxDEV(IconHash, {\n          size: 20\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          size: \"md\",\n          weight: 500,\n          ml: \"xs\",\n          color: \"blue\",\n          children: hashtag.slice(1)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Badge, {\n          color: \"blue\",\n          ml: \"auto\",\n          children: count\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n_c = HashtagRanking;\nexport default HashtagRanking;\nvar _c;\n$RefreshReg$(_c, \"HashtagRanking\");","map":{"version":3,"names":["React","Box","Text","Card","Badge","Divider","IconHash","jsxDEV","_jsxDEV","HashtagRanking","tweets","hashtags","hashtagCounts","forEach","hashtag","sortedHashtags","Object","entries","sort","a","b","shadow","p","style","width","children","weight","size","mb","align","fileName","_jsxFileName","lineNumber","columnNumber","map","count","index","my","display","ml","color","slice","_c","$RefreshReg$"],"sources":["/Users/kaito/hackathon/FE/app/src/Post/Hashtag_ranking.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Box, Text, Card, Badge, Divider } from '@mantine/core';\nimport { IconHash } from '@tabler/icons-react';\n\ninterface Tweet {\n  content: string;\n}\n\ninterface HashtagRankingProps {\n  tweets: Tweet[];\n  hashtags: string[];\n}\n\nconst HashtagRanking: React.FC<HashtagRankingProps> = ({ tweets, hashtags }) => {\n  // ハッシュタグのカウントを行うロジックを追加\n  const hashtagCounts: { [key: string]: number } = {};\n  hashtags.forEach((hashtag) => {\n    if (hashtagCounts[hashtag]) {\n      hashtagCounts[hashtag]++;\n    } else {\n      hashtagCounts[hashtag] = 1;\n    }\n  });\n\n  // ハッシュタグを頻度でソートしてランキングを作成\n  const sortedHashtags = Object.entries(hashtagCounts).sort((a, b) => b[1] - a[1]);\n\n  return (\n    <Card shadow=\"sm\" p=\"lg\" style={{ width: '100%' }}>\n      <Text weight={700} size=\"lg\" mb=\"md\" align=\"center\">\n        トレンド\n      </Text>\n      {sortedHashtags.map(([hashtag, count], index) => (\n        <Box key={index} mb=\"sm\">\n          <Divider my=\"sm\" />\n          <Box display=\"flex\">\n            <IconHash size={20} />\n            <Text size=\"md\" weight={500} ml=\"xs\" color='blue'>\n            {hashtag.slice(1)}\n            </Text>\n            <Badge color=\"blue\" ml=\"auto\">\n              {count}\n            </Badge>\n          </Box>\n        </Box>\n      ))}\n    </Card>\n  );\n};\n\nexport default HashtagRanking;\n"],"mappings":";AAAA,OAAOA,KAAK,MAA+B,OAAO;AAClD,SAASC,GAAG,EAAEC,IAAI,EAAEC,IAAI,EAAEC,KAAK,EAAEC,OAAO,QAAQ,eAAe;AAC/D,SAASC,QAAQ,QAAQ,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAW/C,MAAMC,cAA6C,GAAGA,CAAC;EAAEC,MAAM;EAAEC;AAAS,CAAC,KAAK;EAC9E;EACA,MAAMC,aAAwC,GAAG,CAAC,CAAC;EACnDD,QAAQ,CAACE,OAAO,CAAEC,OAAO,IAAK;IAC5B,IAAIF,aAAa,CAACE,OAAO,CAAC,EAAE;MAC1BF,aAAa,CAACE,OAAO,CAAC,EAAE;IAC1B,CAAC,MAAM;MACLF,aAAa,CAACE,OAAO,CAAC,GAAG,CAAC;IAC5B;EACF,CAAC,CAAC;;EAEF;EACA,MAAMC,cAAc,GAAGC,MAAM,CAACC,OAAO,CAACL,aAAa,CAAC,CAACM,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAAC,CAAC,CAAC,GAAGD,CAAC,CAAC,CAAC,CAAC,CAAC;EAEhF,oBACEX,OAAA,CAACL,IAAI;IAACkB,MAAM,EAAC,IAAI;IAACC,CAAC,EAAC,IAAI;IAACC,KAAK,EAAE;MAAEC,KAAK,EAAE;IAAO,CAAE;IAAAC,QAAA,gBAChDjB,OAAA,CAACN,IAAI;MAACwB,MAAM,EAAE,GAAI;MAACC,IAAI,EAAC,IAAI;MAACC,EAAE,EAAC,IAAI;MAACC,KAAK,EAAC,QAAQ;MAAAJ,QAAA,EAAC;IAEpD;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,EACNlB,cAAc,CAACmB,GAAG,CAAC,CAAC,CAACpB,OAAO,EAAEqB,KAAK,CAAC,EAAEC,KAAK,kBAC1C5B,OAAA,CAACP,GAAG;MAAa2B,EAAE,EAAC,IAAI;MAAAH,QAAA,gBACtBjB,OAAA,CAACH,OAAO;QAACgC,EAAE,EAAC;MAAI;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACnBzB,OAAA,CAACP,GAAG;QAACqC,OAAO,EAAC,MAAM;QAAAb,QAAA,gBACjBjB,OAAA,CAACF,QAAQ;UAACqB,IAAI,EAAE;QAAG;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACtBzB,OAAA,CAACN,IAAI;UAACyB,IAAI,EAAC,IAAI;UAACD,MAAM,EAAE,GAAI;UAACa,EAAE,EAAC,IAAI;UAACC,KAAK,EAAC,MAAM;UAAAf,QAAA,EAChDX,OAAO,CAAC2B,KAAK,CAAC,CAAC;QAAC;UAAAX,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACX,CAAC,eACPzB,OAAA,CAACJ,KAAK;UAACoC,KAAK,EAAC,MAAM;UAACD,EAAE,EAAC,MAAM;UAAAd,QAAA,EAC1BU;QAAK;UAAAL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACD,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CAAC;IAAA,GAVEG,KAAK;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAWV,CACN,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEX,CAAC;AAACS,EAAA,GAnCIjC,cAA6C;AAqCnD,eAAeA,cAAc;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}